// <auto-generated />
using System;
using FormEase.Infrastructure.PostgreSQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormEase.Infrastructure.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702102128_PendingMigration")]
    partial class PendingMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormEase.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7be33602-245a-473e-89b5-b82ade3e7340",
                            Email = "pirmatovalisher2000@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisher",
                            IsBlocked = false,
                            LastName = "Pirmatov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER2000@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER2000@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENWs+1VAWlRLiCVy3LjUbNx7OwudrjCaCEBlRRf0wGKFhywKP/59D5MB0VpYkPc5FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "001bd14c-05aa-44ef-81f0-0a8949da41d3",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher2000@gmail.com"
                        },
                        new
                        {
                            Id = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "403f0625-6bac-4c03-b659-94281910083b",
                            Email = "pirmatovalisher@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            IsBlocked = false,
                            LastName = "Pandya",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJH9OmzbJt/JWCsB0zOZai7XN49XMKh2dSJEzcE0m3Txhf7jYIwXy58cNPFDmXKWzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5157affb-4a4f-4863-ba37-04de06f82193",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa902713-155c-47a6-acdb-39a4f696ebfa",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsBlocked = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJxzRYYUOfRb7GF8nRPPlpATO8vl0E8MwuXRZWJrhETEjCcQQytjN9eIGkt1W3NRlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8aa27633-398a-49a2-9990-92e427609f28",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9104167-e98c-4b23-ab45-936a5defb0b5",
                            Email = "creator@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsBlocked = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREATOR@EXAMPLE.COM",
                            NormalizedUserName = "CREATOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ283VAlp3I4HsKLYvdStE51vQRP1YHnpUaiaDa/6DGMRrdvqZwEbVU55OimBDFPQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f5d1b2e-3b27-467c-be54-083f96245ded",
                            TwoFactorEnabled = false,
                            UserName = "creator@example.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "893d0c8b-914f-4f67-a5ad-7c934b1c6bf4",
                            Email = "respondent@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            IsBlocked = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "RESPONDENT@EXAMPLE.COM",
                            NormalizedUserName = "RESPONDENT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTc2yhx4oC2uzaiv3+1pf0eR/C475GJPg8Bn7SgD9QhFyZH31gXl1L+KEU4EgTJ3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad50ac6-52e9-4815-9554-4a0c7d03fad8",
                            TwoFactorEnabled = false,
                            UserName = "respondent@example.com"
                        });
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.TemplateTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateTags");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.UserTemplateAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTemplateAccesses");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RespondentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RespondentId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormResponses");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInResponseList")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.SelectedOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("OptionId");

                    b.ToTable("SelectedOptions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsPublic");

                    b.HasIndex("TopicId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.MetadataModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FirstUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000001"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5395),
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000002"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5412),
                            Name = "Algebra"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000003"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5415),
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000004"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5417),
                            Name = "Workplace"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000005"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5419),
                            Name = "Science"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000006"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5423),
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000007"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5425),
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000008"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5427),
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000009"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5429),
                            Name = "Technology"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000010"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5432),
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000011"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5434),
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000012"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5436),
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000013"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5437),
                            Name = "AI"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000014"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5451),
                            Name = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000015"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5453),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000016"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5455),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000017"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5457),
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000018"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5460),
                            Name = "Startup"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000019"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000020"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5464),
                            Name = "E-Learning"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000021"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5466),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000022"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5468),
                            Name = "Geography"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000023"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5470),
                            Name = "Literature"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000024"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5472),
                            Name = "Languages"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000025"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5474),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000026"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5476),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000027"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5478),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000028"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5480),
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000029"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5482),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000030"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5489),
                            Name = "Mental Health"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000031"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5491),
                            Name = "Art"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000032"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5492),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000033"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5495),
                            Name = "Photography"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000034"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5497),
                            Name = "Design"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000035"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5499),
                            Name = "UX/UI"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000036"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5501),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000037"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5503),
                            Name = "Football"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000038"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5505),
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000039"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5507),
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000040"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5509),
                            Name = "Movies"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000041"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5511),
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000042"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5513),
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000043"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5515),
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000044"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5517),
                            Name = "Travel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000045"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5518),
                            Name = "Sustainability"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000046"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5520),
                            Name = "Environment"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000047"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5522),
                            Name = "Politics"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000048"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5524),
                            Name = "Society"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000049"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5526),
                            Name = "Survey"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000050"),
                            FirstUsed = new DateTime(2025, 7, 2, 10, 21, 25, 744, DateTimeKind.Utc).AddTicks(5528),
                            Name = "Feedback"
                        });
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.MetadataModels.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0001-000000000001"),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0002-000000000002"),
                            Name = "Quiz"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0003-000000000003"),
                            Name = "Survey"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0004-000000000004"),
                            Name = "Feedback"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000005"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8815f0d6-db8e-4606-8acb-12844e7b796b",
                            ConcurrencyStamp = "e066bf64-f266-46ae-887c-d2f56d6ca310",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7",
                            ConcurrencyStamp = "389de957-cb1f-419b-860f-bd3138ef8333",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            RoleId = "8815f0d6-db8e-4606-8acb-12844e7b796b"
                        },
                        new
                        {
                            UserId = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.TemplateTag", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.MetadataModels.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.UserTemplateAccess", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("AllowedTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Answer", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Respondent")
                        .WithMany("FormResponses")
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("FormResponses")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Respondent");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.QuestionOption", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.SelectedOption", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Answer", "Answer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.QuestionOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Creator")
                        .WithMany("CreatedTemplates")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.MetadataModels.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Comment", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Like", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormEase.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AllowedTemplates");

                    b.Navigation("Comments");

                    b.Navigation("CreatedTemplates");

                    b.Navigation("FormResponses");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Answer", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.Navigation("AllowedUsers");

                    b.Navigation("Comments");

                    b.Navigation("FormResponses");

                    b.Navigation("Likes");

                    b.Navigation("Questions");

                    b.Navigation("TemplateTags");
                });
#pragma warning restore 612, 618
        }
    }
}
