// <auto-generated />
using System;
using FormEase.Infrastructure.PostgreSQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormEase.Infrastructure.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250622191050_TemplateImageMakeOptional")]
    partial class TemplateImageMakeOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormEase.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffd521b9-235e-4407-9dc9-0d01886df395",
                            Email = "pirmatovalisher2000@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisher",
                            IsBlocked = false,
                            LastName = "Pirmatov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER2000@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER2000@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP82KXkypBVtYbMLf7doA0QQBvf6X4WJ8+C8CNfRrSyKjRcemAcrTY2Qq3IY5DZ1Yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f384c48d-4930-4fe8-b5fa-ca3604e85395",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher2000@gmail.com"
                        },
                        new
                        {
                            Id = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34c1937c-7aac-4816-a3ec-9f4853dd3728",
                            Email = "pirmatovalisher@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            IsBlocked = false,
                            LastName = "Pandya",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIRMATOVALISHER@GMAIL.COM",
                            NormalizedUserName = "PIRMATOVALISHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAiYXSMbaXA+o3OMGXOzOZzQUzJvgAoYBpv0LyzAq5Qie8uxQ6AH8RGGdVeNuVrgJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32bb104b-dcf5-4843-94ca-4f23c178b35f",
                            TwoFactorEnabled = false,
                            UserName = "pirmatovalisher@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b5b5384-2547-4627-bde4-ad828639712e",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsBlocked = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPtgSWSQzFOv4QbuQPVyhUTW+LGEirV+gCWJPgR27NesELDgLcpWfDh+WgDAg+Wtkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7758838-ebaa-4d71-895b-14f569fa8d40",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac9ddcd7-32ee-474f-bb5e-9e720fe3f1f4",
                            Email = "creator@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsBlocked = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREATOR@EXAMPLE.COM",
                            NormalizedUserName = "CREATOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1RmcMoKRzvNrtBMUins2xr5XLqQ9eTsiiV2dfwJ36o6H1rcGft50u+/8fkHjGh2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "310a1302-0f9b-4677-ab08-ca1f4d9c8d67",
                            TwoFactorEnabled = false,
                            UserName = "creator@example.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86cefb80-9410-430d-9288-ccc91cdebf7c",
                            Email = "respondent@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            IsBlocked = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "RESPONDENT@EXAMPLE.COM",
                            NormalizedUserName = "RESPONDENT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEApSZIwK0S5omcY/jF7qM0nsK35X97Viwcuu/4bPBEzp03KdVjwZT6nZGi28XGzDDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f82e709-99b9-45f5-9533-e6c49f3e6fa2",
                            TwoFactorEnabled = false,
                            UserName = "respondent@example.com"
                        });
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.TemplateTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateTags");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.UserTemplateAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTemplateAccesses");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RespondentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RespondentId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormResponses");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowInResponseList")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsPublic");

                    b.HasIndex("TopicId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.MetadataModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FirstUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.MetadataModels.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0001-000000000001"),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0002-000000000002"),
                            Name = "Quiz"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0003-000000000003"),
                            Name = "Survey"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0004-000000000004"),
                            Name = "Feedback"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0005-000000000005"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8815f0d6-db8e-4606-8acb-12844e7b796b",
                            ConcurrencyStamp = "aad08463-f299-42da-986c-0c08b1162164",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7",
                            ConcurrencyStamp = "d8e3f585-8d48-4b97-b906-0f096fdec6a5",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Member",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bb49ce85-c5c9-41d9-9665-321d430b7e2e",
                            RoleId = "8815f0d6-db8e-4606-8acb-12844e7b796b"
                        },
                        new
                        {
                            UserId = "2ade9cc9-9152-4209-ae22-f2e9e57b09a7",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "d140eb54-ed6e-4ff2-9199-71fcbe722ef7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.TemplateTag", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.MetadataModels.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("TemplateTags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.AccessControlModels.UserTemplateAccess", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("AllowedTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Answer", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Respondent")
                        .WithMany("FormResponses")
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("FormResponses")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Respondent");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.QuestionOption", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Creator")
                        .WithMany("CreatedTemplates")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.MetadataModels.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Comment", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.PermissionModels.Like", b =>
                {
                    b.HasOne("FormEase.Core.Models.WebApplication.CoreModels.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormEase.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormEase.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AllowedTemplates");

                    b.Navigation("Comments");

                    b.Navigation("CreatedTemplates");

                    b.Navigation("FormResponses");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.FormResponse", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("FormEase.Core.Models.WebApplication.CoreModels.Template", b =>
                {
                    b.Navigation("AllowedUsers");

                    b.Navigation("Comments");

                    b.Navigation("FormResponses");

                    b.Navigation("Likes");

                    b.Navigation("Questions");

                    b.Navigation("TemplateTags");
                });
#pragma warning restore 612, 618
        }
    }
}
