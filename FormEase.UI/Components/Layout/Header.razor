@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject TemplateSearchService TemplateSearchService

<RadzenHeader>

	<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
			<RadzenButton Icon="menu" Click="@(OpenSideDialog)" Variant="Variant.Text" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Large" />
			<RadzenLink Path="/" Icon="home" Style="text-decoration: none !important; font-size:24px;"  />
		</RadzenStack>
		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
			<RadzenTextBox @bind-Value="@SearchTerm"
						   @onkeyup="HandleSearchInput"
						   Placeholder="Search templates..."
						   Style="width: 100%;" />

			<RadzenAppearanceToggle />
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0rem">
			</RadzenStack>

		</RadzenStack>
	</RadzenStack>

</RadzenHeader>



@code {

	private string SearchTerm = string.Empty;

	public EventCallback<string> SearchTermChanged { get; set; }

	private void HandleSearchInput(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			PerformSearch();
		}
	}

	private void PerformSearch()
	{
		if (!string.IsNullOrWhiteSpace(SearchTerm))
		{
			Navigation.NavigateTo($"/search?query={Uri.EscapeDataString(SearchTerm)}");
		}
	}

	private async Task UpdateSearchTerm(string value)
	{
		SearchTerm = value;
		var templates = await TemplateSearchService.SearchTemplatesAsync(SearchTerm);
	}

	private void OpenSideDialog()
	{
		var options = new DialogOptions()
			{
				Left = "0px",
				Width = "400px",
				Height = "100%",
				CloseDialogOnOverlayClick = true
			};

		DialogService.Open("", ds =>@<SideMenu />, options);
	}
}