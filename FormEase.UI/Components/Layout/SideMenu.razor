@using Microsoft.AspNetCore.Antiforgery

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<RadzenStack Orientation="Orientation.Vertical" Gap="15px" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start">
	<h3>Side Menu</h3>
	<RadzenLink Path="/" Text="Home" />

	<AuthorizeView Roles="Admin">
		<RadzenLink Path="/admin/users" Text="Admin" />
	</AuthorizeView>

	<AuthorizeView>
		<Authorized>
			<RadzenLink Path="@($"/user-page/{userId}")" Text="My Templates" />

			<form method="post" action="/Account/Logout">
				@* This injects the antiforgery token *@
				<input name="returnUrl" type="hidden" value="@currentUrl" />
				<input name="__RequestVerificationToken" type="hidden" value="@antiforgeryToken" />
				@* <button type="submit" class="btn btn-link">Logout</button> *@
				<RadzenButton ButtonType="ButtonType.Submit" Text="Logout" Variant="Variant.Text" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Base" />
			</form>
		</Authorized>
		<NotAuthorized>
			<RadzenLink Path="/Account/Login" Text="Login" />
			<RadzenLink Path="/Account/Register" Text="Register" />
		</NotAuthorized>
	</AuthorizeView>


	<RadzenPanelMenu Style="width:100%">
		<RadzenPanelMenuItem Text="Language" Icon="language">
			<RadzenPanelMenuItem Text="Uz" Path="/" Icon="account_circle"></RadzenPanelMenuItem>
			<RadzenPanelMenuItem Text="Eng" Path="/" Icon="perm_media"></RadzenPanelMenuItem>
		</RadzenPanelMenuItem>
	</RadzenPanelMenu>
</RadzenStack>

@code {
	private string? currentUrl;

	private string? userId;

	[Inject] IAntiforgery Antiforgery { get; set; } = default!;
	[Inject] IHttpContextAccessor HttpContextAccessor { get; set; } = default!;
	private string antiforgeryToken = "";

	protected override async Task OnInitializedAsync()
	{
		var tokens = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext!);
		antiforgeryToken = tokens.RequestToken!;

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated == true)
		{
			userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
		}
	}
}

