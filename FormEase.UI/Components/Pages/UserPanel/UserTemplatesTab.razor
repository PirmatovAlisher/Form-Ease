@inject ITemplateService TemplateService
@inject NavigationManager NavManager


<RadzenCard Variant="Variant.Filled" Style="height:730px" class="rz-shadow-6">

	<RadzenRow JustifyContent="JustifyContent.SpaceBetween" class="rz-mb-5">
		<RadzenCard Variant="Variant.Outlined" class="rz-border-radius-5">

			<!-- Filter Presets -->
			<RadzenStack Orientation="Orientation.Horizontal" Gap="15px">
				<RadzenButton Click="@(() => CreateTemp())"
							  Text="New" Icon="add_chart" class="no-uppercase rz-border-radius-5"
							  Variant="Variant.Filled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Lighter" Size="ButtonSize.Medium" />

				<RadzenButton Click="EditTemp"
							  Icon="edit" Disabled="@(selectedTemps.Count != 1)" class="rz-border-radius-5"
							  Variant="Variant.Filled" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Lighter" Size="ButtonSize.Medium" />

				<RadzenButton Click="@RemoveTemps"
							  Icon="delete" Disabled="@(selectedTemps.Count == 0)" class="rz-border-radius-5"
							  Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Lighter" Size="ButtonSize.Medium" />

			</RadzenStack>
		</RadzenCard>
	</RadzenRow>

	<RadzenDataGrid @ref="grid" TItem="TemplateListDto" Data="templates" @bind-Value=@selectedTemps
					AllowRowSelectOnRowClick="true" SelectionMode="DataGridSelectionMode.Multiple"
					AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" PageSize="8">

		<Columns>

			<!-- Selection Check box -->
			<RadzenDataGridColumn TItem="TemplateListDto" Sortable="false" Filterable="false" Width="25px">
				<HeaderTemplate>
					<RadzenCheckBox TValue="bool"
									Value="@IsAllSelected"
									Change="@(async _ => await ToggleSelectAll())" />
				</HeaderTemplate>
				<Template Context="temp">
					<RadzenCheckBox TValue="bool"
									Value="@(selectedTemps.Contains(temp))"
									Change="@(_ => ToggleSelection(temp))" />
				</Template>
			</RadzenDataGridColumn>

			<!-- Template Title -->
			<RadzenDataGridColumn Property="@nameof(TemplateListDto.Title)" TItem="TemplateListDto" Title="Title" Width="60px">
				<Template Context="temp">
					@temp.Title
				</Template>
			</RadzenDataGridColumn>

			<!-- Template Description -->
			<RadzenDataGridColumn Property="@nameof(TemplateListDto.Description)" TItem="TemplateListDto" Title="Description" Width="80px">
				<Template Context="temp">
					<RadzenMarkdown Text="@temp.Description" />
				</Template>
			</RadzenDataGridColumn>

			<!-- Template IsPublic -->
			<RadzenDataGridColumn Property="@nameof(TemplateListDto.IsPublic)" TItem="TemplateListDto" Title="Status" Width="80px">
				<Template Context="temp">
					@if (@temp.IsPublic)
					{
						<p>Public</p>
					}
					else
					{
						<p>Private</p>
					}

				</Template>

			</RadzenDataGridColumn>

			<!-- Template Topic -->
			<RadzenDataGridColumn TItem="TemplateListDto" Title="Topic" Width="80px">
				<Template Context="temp">
					@temp.Topic.Name
				</Template>
			</RadzenDataGridColumn>

			<!-- Template Created Time -->
			<RadzenDataGridColumn Property="@nameof(TemplateListDto.CreatedAt)" TItem="TemplateListDto" Title="Created" Width="60px">
				<Template Context="temp">
					@temp.CreatedAt.ToString("ddd MMM d, yyyy-H:mm")
				</Template>
			</RadzenDataGridColumn>

			<!-- Template Updated Time -->
			<RadzenDataGridColumn Property="@nameof(TemplateListDto.UpdatedAt)" TItem="TemplateListDto" Title="Updated" Width="60px">
				<Template Context="temp">
					@temp.UpdatedAt.ToString("ddd MMM d, yyyy-H:mm")
				</Template>
			</RadzenDataGridColumn>

		</Columns>
	</RadzenDataGrid>

</RadzenCard>
@code {

	[Parameter]
	public string? UserId { get; set; }

	RadzenDataGrid<TemplateListDto> grid;

	private List<TemplateListDto> templates = new();
	private IList<TemplateListDto> selectedTemps = new List<TemplateListDto>();

	private bool IsAllSelected =>
		templates.Any() && selectedTemps.Count() == templates.Count();


	protected override async Task OnInitializedAsync()
	{
		templates = await TemplateService.GetAllCreatorTemplatesAsync(UserId);
	}

	private async Task CreateTemp()
	{
		NavManager.NavigateTo($"/create-template/{UserId}");
	}

	private void EditTemp()
	{
		if (selectedTemps.Count == 1)
		{
			var template = selectedTemps.First();

			NavManager.NavigateTo($"/edit-template/{template.Id}/{UserId}");
		}
	}

	private async Task RemoveTemps()
	{
		var temIds = selectedTemps.Select(t => t.Id).ToList();

		await TemplateService.RemoveTemplatesAsync(temIds);

		selectedTemps = new List<TemplateListDto>();

		var toRemove = templates.Where(t => temIds.Contains(t.Id)).ToList();
		templates = templates.Except(toRemove).ToList();

		await grid.Reload();
		StateHasChanged();
		//NavManager.Refresh(true);
	}

	private async Task ToggleSelectAll()
	{
		if (IsAllSelected)
		{
			selectedTemps = new List<TemplateListDto>();
		}
		else
		{
			selectedTemps = new List<TemplateListDto>(templates);
		}
		await grid.Reload();
		StateHasChanged();
	}

	private void ToggleSelection(TemplateListDto temp)
	{
		if (selectedTemps.Contains(temp))
		{
			selectedTemps.Remove(temp);
		}
		else
		{
			selectedTemps.Add(temp);
		}

		// Optional: Force grid refresh if needed
		grid.Reload();
		StateHasChanged();
	}
}
